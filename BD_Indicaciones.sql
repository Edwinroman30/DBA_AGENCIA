--Crea	un	proceso	que	permita	registrar	una	tabla	un	reporte	de	la	cantidad	de	
--envíos,	por	cliente, por	año.	El	procedimiento	debe	incluir	gestión	
--transaccional	y	control	de	errores.
CREATE VIEW RP_envios
as 
(	SELECT Tb_RentaEnvios.id_cliente,Tb_Cliente.nombre ,COUNT(*) as [cantidad_envios], Year(fecha_envio) as [ANIO]
	FROM Tb_RentaEnvios
	INNER JOIN 
		Tb_Cliente ON Tb_Cliente.id_cliente = Tb_RentaEnvios.id_cliente
	GROUP BY Tb_RentaEnvios.id_cliente, Tb_Cliente.nombre,  Year(fecha_envio)
)



CREATE TABLE Tb_REPORTE
(
	id_reporte INT PRIMARY KEY IDENTITY (1,1),
	id_cliente INT NOT NULL,
	fullname varchar (65) NOT NULL,
	cantidad_envios int NOT NULL,
	anio_reporte int NOT NULL,
	fecha_generacion datetime default GETDATE()
);


CREATE PROC SP_reporte_envios
as
BEGIN

	--CREAR UNA TABLA INTERMEDIARIA COMO REFERENCIA.
	CREATE TABLE #TEMP
	(
		id_reporte INT PRIMARY KEY IDENTITY (1,1),
		id_cliente INT NOT NULL,
		fullname varchar (65) NOT NULL,
		cantidad_envios int NOT NULL,
		anio_reporte int NOT NULL,
		fecha_generacion datetime default GETDATE()
	);

	
	INSERT INTO #TEMP
	SELECT *
		FROM RP_envios

	MERGE /*TABLA DE DESTINO*/Tb_REPORTE AS TARGET
	USING /*TABLA DE ORIGEN*/#TEMP AS SOURCE 
		ON (TARGET.id_cliente = SOURCE.id_cliente) /*COLUMNA POR LA QUE SE COMUNICAN AMBAS TABLAS*/
	WHEN MATCHED AND (TARGET.cantidad_envios <> SOURCE.cantidad_envios AND TARGET.anio_reporte =SOURCE.anio_reporte) THEN
		
		/*ACCION A REALIZAR CUANDO COINCIDEN*/
		UPDATE SET
			TARGET.id_cliente = SOURCE.id_cliente,
			TARGET.fullname = SOURCE.fullname,
			TARGET.cantidad_envios = SOURCE.cantidad_envios,
			TARGET.anio_reporte = SOURCE.anio_reporte
	WHEN NOT MATCHED BY TARGET THEN
		/*ACCION A REALIZAR CUANDO NO COINCIDEN CON LA TABLA  DESTINO*/
		INSERT  
		VALUES (SOURCE.id_cliente,SOURCE.fullname,SOURCE.cantidad_envios, SOURCE.anio_reporte,GETDATE());
END	
GO


---sp completo y funcional.
ALTER PROC SP_reporte_envios
as
BEGIN

	DECLARE @numColumns int;
	SELECT @numColumns = COUNT(*) FROM Tb_REPORTE;

	IF(@numColumns = 0)
	BEGIN ---COMIENZO DEL IF
		BEGIN TRY 		
			--CREAR UNA TABLA INTERMEDIARIA COMO REFERENCIA.
			CREATE TABLE #TEMP1
					(
						id_cliente INT NOT NULL,
						fullname varchar (65) NOT NULL,
						cantidad_envios int NOT NULL,
						anio_reporte int NOT NULL,
						fecha_generacion datetime default GETDATE()
					);

				INSERT INTO #TEMP1
					SELECT *, GETDATE()
					FROM RP_envios

				SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
				-- LO PONGO SERÍALIZABLE DEBIDO A QUE QUIERO HACERLO (EN UN TIEMPO X) Y MANTENER CIERTO GRADDO DE COINSISTENCIA.
				BEGIN TRANSACTION TRAN_REPORT
				
				INSERT INTO Tb_REPORTE
					SELECT *
					FROM #TEMP1
				
				print 'PRIMERA OPCION -  SE INSERTARAN NUEVOS REGISTROS DE REPORTE....'

				COMMIT 

				RETURN 0; -- INTERRUMPIENDO EL SP, NO ME INTERESA SEGUIR LA EJECUCIÓN.

		END TRY
		BEGIN CATCH  
				ROLLBACK 
				RAISERROR('HA OCURRIDO UN ERROR AL MOMENTO DE GENERAR EL PRIMER REPORTE (RP_0001), COMUNIQUESE CON Edwin Alberto....', 16,1)
				RETURN -1;
		END CATCH

	END --CIERRE INTERNO DEL IF
	ELSE 
	BEGIN 
		BEGIN TRY
			--CREAR UNA TABLA INTERMEDIARIA COMO REFERENCIA.
			CREATE TABLE #TEMP
				(	
					id_reporte INT PRIMARY KEY,
					id_cliente INT NOT NULL,
					fullname varchar (65) NOT NULL,
					cantidad_envios int NOT NULL,
					anio_reporte int NOT NULL,
					fecha_generacion datetime default GETDATE()
				);
				
				SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
				-- LO PONGO SERÍALIZABLE DEBIDO A QUE QUIERO HACERLO (EN UN TIEMPO X) Y MANTENER CIERTO GRADDO DE COINSISTENCIA.
				-- AQUÍ ME ASEGURO DE QUE LOS DATOS NO HAYAN SIDO MANIPULADOS Y PASAR DATOS CONSISTENTE AL PROCESO SIGUIENTE, EL CUAL
				-- TODOS VIENEN ARRASTRANDO UN NIVEL DE AISLAMIENTO FUERTE COMO EL SERIALIZABLE.
				BEGIN TRANSACTION TRAN_REPORT_EXITENTES

				INSERT INTO #TEMP
				SELECT *
				FROM Tb_REPORTE		
		
				COMMIT 
			PRINT 'SEGUNDA OPCION - AQUÍ SE IDENTIFICO DATOS EXISTENTES DE REPORTE Y SE INSERTARAN O ACTUALIZARAN....'
		END TRY
		BEGIN CATCH
			ROLLBACK 
			RAISERROR('HA OCURRIDO UN ERROR AL MOMENTO DE ACTUALIZAR DATOS O INGRESAR EN NUESTRO NUEVO REPORTE (RP_0002), COMUNIQUESE CON Edwin Alberto....', 16,1)
			RETURN -1;
		END CATCH
	END--FIN DEL ELSE 
	
	--AUN QUE SE CONFIRME ARRIBA Y FALLE DE BAJO, LA COINSISTENCIA SE MANTIENE POR QUE LA CONFIRMACIÓN ANTERIOR ES SOLO UN INTERMEDIARIO
	--TEMPORAR PARA SABER SI HAY DATOS ACTUALIZADOS O UNO NUEVO, AL SER TEMPORAR SI HAY ALGUN ERROR ESTE NO SE ALMACENARÁ EN NUESTRA TABLA FÍSICA.
	
	--FACETA DE VERIFICAR DUPLICADO Y COINSIDENCIAS.
	BEGIN TRY
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
		BEGIN TRANSACTION TRAN_REPORT_ACTUA_INSERCIONES

				MERGE /*TABLA DE DESTINO*/ Tb_REPORTE AS TARGET
				USING /*TABLA DE ORIGEN*/ RP_envios AS SOURCE 
					ON (TARGET.id_cliente = SOURCE.id_cliente AND TARGET.anio_reporte = SOURCE.ANIO) /*COLUMNA POR LA QUE SE COMUNICAN AMBAS TABLAS*/
	
				WHEN MATCHED AND (TARGET.cantidad_envios <> SOURCE.cantidad_envios and TARGET.anio_reporte = SOURCE.ANIO) THEN
	
	
						/*ACCION A REALIZAR CUANDO COINCIDEN*/
						UPDATE SET
							TARGET.id_cliente = SOURCE.id_cliente,
							TARGET.fullname = SOURCE.nombre,
							TARGET.cantidad_envios = SOURCE.cantidad_envios,
							TARGET.anio_reporte = SOURCE.ANIO
	
				WHEN NOT MATCHED BY TARGET THEN
					/*ACCION A REALIZAR CUANDO NO COINCIDEN CON LA TABLA  DESTINO*/
					INSERT  (id_cliente,fullname,cantidad_envios,anio_reporte,fecha_generacion)
					VALUES (SOURCE.id_cliente,SOURCE.nombre,SOURCE.cantidad_envios, SOURCE.anio,GETDATE());
			
		COMMIT
	END TRY
	BEGIN CATCH
			ROLLBACK 
			RAISERROR('HA OCURRIDO UN ERROR AL MOMENTO DE ACTUALIZAR DATOS O INGRESAR EN NUESTRO NUEVO REPORTE (RP_0003), COMUNIQUESE CON Edwin Alberto....', 16,1)
			RETURN -1;
	END CATCH

END	-- FIN PROCEDURE
GO

--TABLA VISTA
SELECT *
FROM RP_envios
GO


SELECT *
FROM Tb_REPORTE
GO

EXEC SP_reporte_envios


----DOCUMENTACIÓN DEL MATCHED:

--MERGE /*TABLA DE DESTINO*/ AS TARGET
--	USING /*TABLA DE ORIGEN*/ AS SOURCE 
--		ON /*COLUMNA POR LA QUE SE COMUNICAN AMBAS TABLAS*/
--	WHEN MATCHED THEN
--		/*ACCION A REALIZAR CUANDO COINCIDEN*/
--	WHEN NOT MATCHED BY TARGET THEN
--		/*ACCION A REALIZAR CUANDO NO COINCIDEN CON LA TABLA  DESTINO*/
--	WHEN NOT MATCHED BY SOURCE THEN
--		/*ACCION A REALIZAR CUANDO NO COINCIDEN CON LA TABLA  ORIGEN*/